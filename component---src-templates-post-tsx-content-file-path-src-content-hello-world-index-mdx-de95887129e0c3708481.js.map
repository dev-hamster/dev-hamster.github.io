{"version":3,"file":"component---src-templates-post-tsx-content-file-path-src-content-hello-world-index-mdx-de95887129e0c3708481.js","mappings":"sKAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,IAAK,MACLC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,IAAK,KAAMO,EAAAA,cAAoBV,EAAYI,KAAM,CAChIO,UAAW,uBACV,4BAA6B,KAAMD,EAAAA,cAAoBV,EAAYK,IAAK,CACzEO,IAAK,4CACLC,IAAK,YACH,KAAMH,EAAAA,cAAoBV,EAAYK,IAAK,CAC7CO,IAAK,6CACLC,IAAK,SACH,KAAMH,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,MAAO,KAAMI,EAAAA,cAAoBV,EAAYO,EAAG,KAAMG,EAAAA,cAAoBV,EAAYI,KAAM,KAAM,WAAY,KAAMM,EAAAA,cAAoBV,EAAYO,EAAG,KAAM,iKACnN,CAKA,MAJA,SAAoBR,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWhB,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,E,kDChBA,MAAMiB,EAAa,CACjBC,KAAIA,EAAAA,IAEN,SAASC,EAAaC,GACpB,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,MAAM,YAACG,GAAeF,EAAKG,IACrBC,GAAYC,EAAAA,EAAAA,GAAkBH,EAAYE,WAChD,OAAOd,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBgB,EAAAA,EAAQ,MAAOhB,EAAAA,cAAoBiB,EAAAA,EAAQ,KAAMjB,EAAAA,cAAoBkB,EAAAA,EAAa,CACrJnB,WAAYO,GACXN,EAAAA,cAAoB,UAAW,CAChCC,UAAW,iBACVD,EAAAA,cAAoB,KAAM,KAAMY,EAAYO,OAAQL,GAAad,EAAAA,cAAoBoB,EAAAA,EAAa,CACnGC,MAAOP,EACPX,IAAKS,EAAYO,MACjBlB,UAAW,WACTU,KACN,CACe,SAASW,EAAiBjC,GACvC,OAAOW,EAAAA,cAAoBQ,EAAcnB,EAAOW,EAAAA,cAAoBuB,EAAqBlC,GAC3F,C,uDCxBO,MAAM0B,EACXD,IAEA,GAAKA,EAEL,MAAI,oBAAqBA,EAChBA,EAAUU,gBAAgBC,gBAE5BX,CAAS,C,4FCelB,MAAMY,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiB7B,GAC/B,MAAM8B,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAf5B,EACFA,EAAW8B,GAGb,IAAIA,KAAsB9B,EACnC,GACA,CAAC8B,EAAmB9B,GAExB,CAWO,SAASmB,EAAYY,GAE1B,IAAIC,EAWJ,OAREA,EADED,EAAWE,qBAEsB,mBAA1BF,EAAW/B,WACd+B,EAAW/B,WAAW2B,GACtBI,EAAW/B,YAAc2B,EAEfE,EAAiBE,EAAW/B,YAGvC,gBACL4B,EAAWM,SACX,CAACC,MAAOH,GACRD,EAAWnB,SAEf,C","sources":["webpack://blog/./src/content/hello-world/index.mdx","webpack://blog/./src/templates/post.tsx","webpack://blog/./src/utils/getThumbnailImage.ts","webpack://blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\",\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"const hello = '3424';\\n\")), \"\\n\", React.createElement(_components.img, {\n    src: \"/279cf09ab04e614824d0a12d8ff50510/ttt.gif\",\n    alt: \"example\"\n  }), \"\\n\", React.createElement(_components.img, {\n    src: \"/61f8f6e83affb4feea6cfcda5e4ad372/qwer.gif\",\n    alt: \"qwer\"\n  }), \"\\n\", React.createElement(_components.h2, null, \"안녕\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"asfsdf\")), \"\\n\", React.createElement(_components.p, null, \"sadlfjal;sddfjklasdfjlk;as sadlfjal;sddfjklasdfjlk;assadlfjal;sddfjklasdfjlk;assadlfjal;sddfjklasdfjlk;assadlfjal;sddfjklasdfjlk;assadlfjal;sddfjklasdfjlk;as\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jina/Documents/GitHub/dev-hamster.github.io/src/content/hello-world/index.mdx\";\nimport {Link} from 'gatsby';\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport {Header} from 'components/Header';\nimport {Layout} from 'components/Layout';\nimport {GatsbyImage} from 'gatsby-plugin-image';\nimport {getThumbnailImage} from 'utils/getThumbnailImage';\nconst shortcodes = {\n  Link\n};\nfunction PageTemplate(_ref) {\n  let {data, children} = _ref;\n  const {frontmatter} = data.mdx;\n  const thumbnail = getThumbnailImage(frontmatter.thumbnail);\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(Layout, null, React.createElement(MDXProvider, {\n    components: shortcodes\n  }, React.createElement(\"article\", {\n    className: \"markdown-body\"\n  }, React.createElement(\"h1\", null, frontmatter.title), thumbnail && React.createElement(GatsbyImage, {\n    image: thumbnail,\n    alt: frontmatter.title,\n    className: \"w-full\"\n  }), children))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PageTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"1754812257\";\n","import { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { Thumbnail } from 'types/post';\n\nexport const getThumbnailImage = (\n  thumbnail?: Thumbnail\n): IGatsbyImageData | undefined => {\n  if (!thumbnail) return;\n\n  if ('childImageSharp' in thumbnail) {\n    return thumbnail.childImageSharp.gatsbyImageData;\n  }\n  return thumbnail as IGatsbyImageData;\n};\n","/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","pre","code","img","h2","p","_provideComponents","components","React","className","src","alt","wrapper","MDXLayout","shortcodes","Link","PageTemplate","_ref","data","children","frontmatter","mdx","thumbnail","getThumbnailImage","Header","Layout","MDXProvider","title","GatsbyImage","image","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","childImageSharp","gatsbyImageData","emptyComponents","MDXContext","useMDXComponents","contextComponents","properties","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}