{"version":3,"file":"component---src-templates-post-tsx-content-file-path-src-content-드래그-이벤트-구현기-2-왜-transform은-더-빠를까-index-mdx-78bc7c77b34b03738c21.js","mappings":"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","sources":["webpack://blog/./src/content/드래그 이벤트 구현기2 - 왜 transform은 더 빠를까/index.mdx","webpack://blog/./src/templates/post.tsx","webpack://blog/./src/utils/getThumbnailImage.ts","webpack://blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    hr: \"hr\",\n    p: \"p\",\n    img: \"img\",\n    h3: \"h3\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"목차\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"들어가며\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"transform\"), \"으로 개선 전 후 성능 비교하기\"), \"\\n\", React.createElement(_components.li, null, \"Layout, Reflow, Paint, Repaint\"), \"\\n\", React.createElement(_components.li, null, \"애니메이션은 어떻게 처리될까?\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"들어가며\"), \"\\n\", React.createElement(_components.p, null, \"드래그 이벤트 구현시 초기에는 엘리먼트의 위치를 \", React.createElement(_components.code, null, \"top\"), \" 과 \", React.createElement(_components.code, null, \"left\"), \" 값으로 업데이트해주었다. 그런데 드래그시 미세하게 버벅거려 \", React.createElement(_components.code, null, \"transform\"), \" 으로 변경해 매끄러운 드래그 이벤트를 구현했다. \", React.createElement(_components.code, null, \"transform\"), \"은 Layout(Reflow)를 발생시키지 않아 더 빠르게 위치를 업데이트 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"이 포스트에서 실제로 성능을 비교해보고 브라우저 렌더링 과정을 이해하고 마지막으로 \", React.createElement(_components.code, null, \"transform\"), \"은 어떻게 처리하는지 알아보자.\"), \"\\n\", React.createElement(_components.h2, null, \"개선 전, 후 성능 비교하기\"), \"\\n\", React.createElement(_components.p, null, \"크롬 성능 측정을 이용해 드래그 이벤트를 발생시킨 후, 드래그가 본격적으로 발생한 약 4초 동안의 구간을 확인해 보았다.\"), \"\\n\", React.createElement(_components.p, null, \"개선 전, 개선 후의 요약 탭을 확인해보면 렌더링은 38ms에서 24ms 로 단축되고 페인팅은 41ms에서 24ms로 로 개선됐다.\"), \"\\n\", React.createElement(_components.p, null, \"개선 전:\\n\", React.createElement(_components.img, {\n    src: \"./%E1%84%80%E1%85%A2%E1%84%89%E1%85%A5%E1%86%AB%E1%84%8C%E1%85%A5%E1%86%AB.png\",\n    alt: \"개선전\"\n  })), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"개선 후: \", React.createElement(_components.img, {\n    src: \"./%E1%84%80%E1%85%A2%E1%84%89%E1%85%A5%E1%86%AB%E1%84%92%E1%85%AE.png\",\n    alt: \"개선후\"\n  })), \"\\n\", React.createElement(_components.p, null, \"다음 사진은 드래그가 발생하는 동안 실행된 작업들이다. 여기서 하나를 확대해보자.\\n\", React.createElement(_components.img, {\n    src: \"./%E1%84%83%E1%85%B3%E1%84%85%E1%85%A2%E1%84%80%E1%85%B3-%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC%E1%84%8C%E1%85%AE%E1%86%BC%E1%84%8B%E1%85%B5%E1%86%AB-%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%8B%E1%85%A5%E1%86%B8%E1%84%83%E1%85%B3%E1%86%AF.png\",\n    alt: \"드래그시 실행 중인 작업\"\n  })), \"\\n\", React.createElement(_components.p, null, \"mousemove가 드래그 이벤트가 발생한 시점이다. 개선 전 작업을 보면 레이아웃과 페인트 작업을 볼 수 있다.\\n\", React.createElement(_components.img, {\n    src: \"./%E1%84%80%E1%85%A2%E1%84%89%E1%85%A5%E1%86%AB%E1%84%8C%E1%85%A5%E1%86%AB%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%8B%E1%85%A5%E1%86%B8.png\",\n    alt: \"개선 전 작업\"\n  })), \"\\n\", React.createElement(_components.p, null, \"반면에 개선 후 작업에서는 페인트 단계만 볼 수 있다.\\n\", React.createElement(_components.img, {\n    src: \"./%E1%84%80%E1%85%A2%E1%84%89%E1%85%A5%E1%86%AB%E1%84%92%E1%85%AE%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%8B%E1%85%A5%E1%86%B8.png\",\n    alt: \"개선 후 작업\"\n  })), \"\\n\", React.createElement(_components.p, null, \"왜 transform 은 레이아웃 작업이 없을까? 브라우저 렌더링 과정에서 알아보자.\"), \"\\n\", React.createElement(_components.h2, null, \"Layout, Reflow, Paint, Repaint\"), \"\\n\", React.createElement(_components.p, null, \"브라우저 렌더링 과정에은 Style, Layout, Paint, 때때로 Compositing이 포함된다. 오늘은 Layout부터 Repaint까지 알아보자.\"), \"\\n\", React.createElement(_components.h3, null, \"Layout\"), \"\\n\", React.createElement(_components.p, null, \"렌더 트리가 만들어진 후, 각 노드의 도형 값을 계산하기 위해 레이아웃을 실행한다. 렌더 트리에 있는 모든 노드의 너비, 높이, 위치를 결정하는 프로세스이다. 처음 노드의 사이즈와 위치가 결정된다.\"), \"\\n\", React.createElement(_components.h3, null, \"Reflow\"), \"\\n\", React.createElement(_components.p, null, \"레이아웃 이후 페이지의 일부분이나 전체 문서에 대한 크기나 위치에 대한 결정한다. 레이아웃 이후에 노드의 크기와 위치를 다시 계산한다. (크롬 개발자 도구에서는 Layout 용어로 통일)\"), \"\\n\", React.createElement(_components.h3, null, \"Paint\"), \"\\n\", React.createElement(_components.p, null, \"텍스트, 색깔, 경계, 그림자 및 버튼인자 이미지 같은 대체 요소를 포함하여 모든 요소의 \", React.createElement(_components.strong, null, \"시각적인 부분\"), \"을 화면에 그리는 작업이다.\"), \"\\n\", React.createElement(_components.h3, null, \"Repaint\"), \"\\n\", React.createElement(_components.p, null, \"첫 페인트 이후 UI변경으로 시각적 업데이트를 표시하기 위해 다시 그릴 때 발생한다. 일반적으로 리플로우 이후에 발생한다.\"), \"\\n\", React.createElement(_components.p, null, \"css 속성별로 렌더링을 발생시키는 작업이 있다. 각 속성이 어떤 렌더링 과정을 일으키는지는 \", React.createElement(_components.a, {\n    href: \"https://lab.skk.moe/css-triggers%EC%97%90%EC%84%9C\"\n  }, \"https://lab.skk.moe/css-triggers\"), \"에서 확인할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"처음으로 구현했던 방법은 left와 top속성을 직접 업데이트하는 것이었는데, Layout을 발생시키는 요소를 확인할 수 있다.\\n\", React.createElement(_components.img, {\n    src: \"./left-%E1%84%90%E1%85%B3%E1%84%85%E1%85%B5%E1%84%80%E1%85%A5.png\",\n    alt: \"left 트리거\"\n  })), \"\\n\", React.createElement(_components.p, null, \"반대로 transform은 Composite만 발생시킨다. (Blink, 크롬기준)\\n\", React.createElement(_components.img, {\n    src: \"./transform-%E1%84%90%E1%85%B3%E1%84%85%E1%85%B5%E1%84%80%E1%85%A5.png\",\n    alt: \"transform 트리거\"\n  })), \"\\n\", React.createElement(_components.p, null, \"여기까지 transform이 실제로 Reflow작업을 방지해 성능을 개선한 것을 눈으로 알아봤다.\"), \"\\n\", React.createElement(_components.h2, null, React.createElement(_components.code, null, \"transform\"), \"은 어떻게 처리될까?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"transform\"), \"은 합성 단계에서 처리된다. 합성 단계는 메인 쓰레드가 아닌, GPU를 이용해 레이어를 합성해 정확하게 화면에 그린다. 레이어는 video, canvas, 3d 또는 원근 변화 css 속성 등 사용시 생성된다.\"), \"\\n\", React.createElement(_components.p, null, \"즉, transform 속성을 사용하면 레이어를 생성한다. 그리고 GPU를 사용해 변경이 일어나면, 기존 레이어를 합성하여 더 빠르게 렌더링을 할 수 있다. 레이어를 이용하면 성능이 향상되지만, 메모리 관리 측면에서는 비싼 작업이므로 주의해야한다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"참고\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/ko/docs/Web/Performance/How_browsers_work\"\n  }, \"https://developer.mozilla.org/ko/docs/Web/Performance/How_browsers_work\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://blog.seokho.dev/ko/development/2021/03/08/ReflowRepaint.html\"\n  }, \"https://blog.seokho.dev/ko/development/2021/03/08/ReflowRepaint.html\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/ko/docs/Glossary/Repaint\"\n  }, \"https://developer.mozilla.org/ko/docs/Glossary/Repaint\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://lab.skk.moe/css-triggers\"\n  }, \"https://lab.skk.moe/css-triggers\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/ko/docs/Web/Performance/How_browsers_work\"\n  }, \"https://developer.mozilla.org/ko/docs/Web/Performance/How_browsers_work\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://web.dev/articles/speed-layers#introducing_layers\"\n  }, \"https://web.dev/articles/speed-layers#introducing_layers\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/bagjin-a/Documents/GitHub/dev-hamster.github.io/src/content/드래그 이벤트 구현기2 - 왜 transform은 더 빠를까/index.mdx\";\nimport {Link} from 'gatsby';\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport {Header} from 'components/Header';\nimport {Layout} from 'components/Layout';\nimport {GatsbyImage} from 'gatsby-plugin-image';\nimport {getThumbnailImage} from 'utils/getThumbnailImage';\nconst shortcodes = {\n  Link\n};\nfunction PageTemplate(_ref) {\n  let {data, children} = _ref;\n  const {frontmatter} = data.mdx;\n  const thumbnail = getThumbnailImage(frontmatter.thumbnail);\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(Layout, null, React.createElement(MDXProvider, {\n    components: Object.assign({\n      ul: props => React.createElement(\"ul\", Object.assign({}, props, {\n        style: {\n          listStyle: 'revert'\n        }\n      })),\n      ol: props => React.createElement(\"ul\", Object.assign({}, props, {\n        style: {\n          listStyleType: 'decimal'\n        }\n      }))\n    }, shortcodes)\n  }, React.createElement(\"article\", {\n    className: \"markdown-body\"\n  }, React.createElement(\"h1\", null, frontmatter.title), thumbnail && React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      paddingBottom: '56.25%'\n    }\n  }, React.createElement(GatsbyImage, {\n    image: thumbnail,\n    alt: frontmatter.title,\n    className: \"absolute top-0 left-0 w-full h-full object-cover\"\n  })), children))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PageTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst query = \"1754812257\";\n","import { IGatsbyImageData } from 'gatsby-plugin-image';\nimport { Thumbnail } from 'types/post';\n\nexport const getThumbnailImage = (\n  thumbnail?: Thumbnail\n): IGatsbyImageData | undefined => {\n  if (!thumbnail) return;\n\n  if ('childImageSharp' in thumbnail) {\n    return thumbnail.childImageSharp.gatsbyImageData;\n  }\n  return thumbnail as IGatsbyImageData;\n};\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","ul","li","code","hr","p","img","h3","strong","a","_provideComponents","components","React","src","alt","href","wrapper","MDXLayout","shortcodes","Link","PageTemplate","_ref","data","children","frontmatter","mdx","thumbnail","getThumbnailImage","Header","Layout","MDXProvider","style","listStyle","ol","listStyleType","className","title","position","width","paddingBottom","GatsbyImage","image","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","childImageSharp","gatsbyImageData","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}